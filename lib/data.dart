/*
 * @Author: zhuohoudeputao
 * @LastEditors: zhuohoudeputao
 * @LastEditTime: 2020-07-13 00:31:26
 * @Description: file content
 */

import 'package:flutter/material.dart';
import 'package:flutter/rendering.dart';
import 'package:new_launcher/action.dart';
import 'package:new_launcher/provider.dart';
import 'package:new_launcher/providers/provider_app.dart';
import 'package:new_launcher/providers/provider_system.dart';
import 'package:new_launcher/providers/provider_theme.dart';
import 'package:new_launcher/providers/provider_time.dart';
import 'package:new_launcher/providers/provider_wallpaper.dart';
import 'package:new_launcher/providers/provider_weather.dart';
import 'package:new_launcher/ui.dart';
import 'package:shared_preferences/shared_preferences.dart';

GlobalKey<NavigatorState> navigatorKey = GlobalKey();

class InfoWidget {
  String key;
  Widget infoWidget;
  DateTime timeStamp;

  InfoWidget(String key, Widget infoWidget) {
    this.key = key;
    this.infoWidget = infoWidget;
    this.timeStamp = DateTime.now();
  }
}

/// Now use [Global] to read or write data.
/// [Global] contains models to save and change data, which are accessible for providers.
/// Frequently used methods can be writed here as static.
class Global {
  //_____________________________________________________________Initialize
  /// Initialize. Call this before run [MyApp].
  static Future init() async {
    await settingsModel.init();
    actionModel.init();
  }

  //________________________________________________________BackgroundImage
  /// A model for storing background image.
  static BackgroundImageModel backgroundImageModel = BackgroundImageModel();
  // Frequently used methods can be writed as static
  /// Set background image
  static setBackgroundImage(ImageProvider value) {
    backgroundImageModel.backgroundImage = value;
  }

  //_______________________________________________________________Settings
  /// A model for storing settings
  static SettingsModel settingsModel = SettingsModel();

  static dynamic getValue(String key, var defaultValue) {
    return settingsModel.getValue(key, defaultValue);
  }

  //__________________________________________________________________Theme
  /// A model for theme management
  static ThemeModel themeModel = ThemeModel();

  static void setTheme(ThemeData themeData) {
    themeModel.themeData = themeData;
  }

  //___________________________________________________________________Info
  /// A model for managing info widgets
  static InfoModel infoModel = InfoModel();

  //__________________________________________________Action_and_Suggestion
  /// A model for managing actions
  static ActionModel actionModel = ActionModel();
  static String input;

  static Future<void> addActions(List<MyAction> actions) async {
    actionModel.addActions(actions);
  }

  //____________________________________________________________MyProviders
  /// A list for storing providers
  static List<MyProvider> providerList = [
    providerWallpaper,
    providerTheme,
    providerTime,
    providerWeather,
    providerApp,
    providerSystem,
  ];

  //_______________________________________________________________________
}

class ActionModel with ChangeNotifier {
  /// A list for storing actions generated by providers
  Map<String, MyAction> _actionMap = <String, MyAction>{};

  Future<void> addActions(List<MyAction> actions) async {
    for (MyAction action in actions) {
      addAction(action);
    }
  }

  Future<void> addAction(MyAction action) async {
    _actionMap[action.name] = action;
  }

  /// A list for storing suggestWidget generated by actions
  List<Widget> _suggestList = <Widget>[];

  /// A list for storing suggestWidget generated by actions
  List<Widget> get suggestList => _suggestList;

  // ui controller
  TextEditingController inputBoxController = TextEditingController();

  Future<void> init() async {
    for (MyProvider provider in Global.providerList) {
      // gather all actions from all providers
      provider.provideActions();
      // do what providers will do at the beginning
      provider.initActions();
    }
  }

  void generateSuggestList(String input) {
    // this.initServices();
    _suggestList.clear();
    // generate suggestList
    for (MyAction action in _actionMap.values) {
      if (action.canIdentifyBy(input)) {
        _suggestList.add(action.suggestWidget);
      }
    }
    notifyListeners();
  }

  void runFirstAction(String input) {
    Global.input = input;
    if (_suggestList.isNotEmpty) {
      FlatButton suggest = _suggestList[0] as FlatButton;
      suggest.onPressed.call();
    } else {
      Global.infoModel.addInfo("Help", "I don't know what to do",
          subtitle: "Try type something else.", icon: Icon(Icons.help));
    }
    // some special care
    inputBoxController.clear();
    generateSuggestList(" ");
  }
}

class InfoModel with ChangeNotifier {
  /// A list for storing info widgets
  List<InfoWidget> _infoList = <InfoWidget>[];

  /// This method use title as key and add a [customInfoWidget] to infoList
  void addInfo(String key, String title,
      {String subtitle, Widget icon, void Function() onTap}) {
    this.addInfoWidget(
        key,
        customInfoWidget(
            title: title, subtitle: subtitle, icon: icon, onTap: onTap));
  }

  /// This method is more flexible for providers
  void addInfoWidget(String key, Widget infoWidget) {
    // check if there is a info widget with the same key
    for (int i = 0; i < this._infoList.length; i++) {
      if (this._infoList[i].key == key) {
        this._infoList.removeAt(i); // remove the widget with the same key
      }
    }
    // add at the end
    this._infoList.add(InfoWidget(key, infoWidget));
    notifyListeners();
  }

  /// get the infoList
  List<Widget> get infoList {
    List<Widget> infoList = <Widget>[];
    for (int i = 0; i < this._infoList.length; i++) {
      infoList.add(this._infoList[i].infoWidget);
    }
    return infoList;
  }

  /// get length
  int get length => _infoList.length;
}

class ThemeModel with ChangeNotifier {
  ThemeData _themeData;
  ThemeData get themeData => _themeData;

  set themeData(ThemeData value) {
    _themeData = value;
    notifyListeners();
  }
}

class SettingsModel with ChangeNotifier {
  Future init() async {
    _prefs = await SharedPreferences.getInstance();
    // Initialize settingList
    Set<String> keys = _prefs.getKeys();
    for (String key in keys) {
      var value = _prefs.get(key);
      _addSettingWidget(key, value);
    }
  }

  // data
  /// A widget list generated for changing settings.
  static Map<String, Widget> _settingMap = <String, Widget>{};
  static SharedPreferences _prefs;
  // getter or setter
  /// [settingList] is generated for all the settings in shared preferences.
  /// Providers just need to save and use key-value pairs,
  /// don't need to design the widget of setting items.
  List<Widget> get settingList {
    return _settingMap.values.toList();
  }

  // manipulators
  /// Save key-value pair for providers.
  /// [value] can be a string, bool, double, int or string list.
  /// If the type of [value] is not support, nothing will be store.
  void saveValue(String key, var value) {
    if (value is String) {
      _prefs.setString(key, value);
    } else if (value is bool) {
      _prefs.setBool(key, value);
    } else if (value is double) {
      _prefs.setDouble(key, value);
    } else if (value is int) {
      _prefs.setInt(key, value);
    } else if (value is List<String>) {
      _prefs.setStringList(key, value);
    }
    _addSettingWidget(key, value);
  }

  /// Get value for providers.
  /// If the [key] is not contained in preferences, [null] is returned.
  dynamic getValue(String key, var defaultValue) async {
    _prefs = await SharedPreferences.getInstance();
    if (_prefs.containsKey(key)) {
      return _prefs.get(key);
    } else {
      saveValue(key, defaultValue);
      return defaultValue;
    }
  }

  void _addSettingWidget(String key, var value) {
    if (value is String) {
      _settingMap[key] = customTextSettingWidget(
          key: key,
          value: value,
          onSubmitted: (value) {
            _prefs.setString(key, value);
            _addSettingWidget(key, value);
          });
    } else if (value is bool) {
      _settingMap[key] = CustomBoolSettingWidget(
          settingKey: key,
          value: value,
          onChanged: (value) {
            _prefs.setBool(key, value);
            _addSettingWidget(key, value);
          });
    } else if (value is double) {
      _settingMap[key] = customTextSettingWidget(
          key: key,
          value: value,
          onSubmitted: (value) {
            _prefs.setDouble(key, double.parse(value));
            _addSettingWidget(key, double.parse(value));
          });
    } else if (value is int) {
      _settingMap[key] = customTextSettingWidget(
          key: key,
          value: value,
          onSubmitted: (value) {
            _prefs.setInt(key, int.parse(value));
            _addSettingWidget(key, int.parse(value));
          });
    } else if (value is List<String>) {
      // coming soon
    }
    notifyListeners();
  }
}

class BackgroundImageModel with ChangeNotifier {
  // data
  ImageProvider _backgroundImage = NetworkImage(
      "http://bizhi.bcoderss.com/wp-content/uploads/2019/05/pixel-3a-wallpaper-droidviews.jpg");
  // getter or setter
  ImageProvider get backgroundImage {
    return _backgroundImage;
  }

  set backgroundImage(ImageProvider value) {
    _backgroundImage = value;
    notifyListeners();
  }
}
